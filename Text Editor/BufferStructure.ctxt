#BlueJ class context
comment0.target=BufferStructure
comment1.params=type
comment1.target=BufferStructure(java.lang.String)
comment1.text=\n\ Default\ constructor.\ \ Sets\ growth\ to\ 5,\ create\ an\ array\ of\n\ GapBuffer,\ and\ initialize\ array\ to\ null.\n\ \n
comment10.params=index
comment10.target=int\ position_line_length(int)
comment10.text=\n\ Obtain\ the\ string\ length\ of\ the\ line\ at\ a\ given\ position.\n\n\ @return\ Returns\ -1\ if\ a\ negative\ index\ is\ passed,\ or\n\ \ \ \ \ \ \ \ \ goes\ beyond\ the\ gap\ buffer\ array.\n
comment11.params=
comment11.target=int\ cursor_line_position()
comment11.text=\n\ Returns\ the\ line\ where\ the\ cursor\ is\ positioned\ and\ where\n\ in\ the\ current\ line\ it\ is\ positioned.\n\ \n\ @return\n
comment12.params=
comment12.target=int\ cursor_position_in_line()
comment12.text=\n\ \ Pass\ cursor_position_in_line\ command\ through\ to\ the\ current\ line.\n\ \ \n\ \ @return\ Return\ the\ result\ of\ gap\ buffer\ cursor_position_in_line.\n
comment13.params=
comment13.target=boolean\ cursor_left()
comment13.text=\n\ \ Pass\ cursor_left\ command\ through\ to\ the\ current\ line.\n\ \ \n\ \ @return\ Return\ the\ result\ of\ gap\ buffer\ cursor_left.\n
comment14.params=char_count
comment14.target=boolean\ cursor_left(int)
comment14.text=\n\ \ Pass\ cursor_left\ command\ through\ to\ the\ current\ line.\n\ \ \n\ \ @return\ Return\ the\ result\ of\ gap\ buffer\ cursor_left.\n
comment15.params=
comment15.target=boolean\ cursor_right()
comment15.text=\n\ \ Pass\ cursor_right\ command\ through\ to\ the\ current\ line.\n\ \ \n\ \ @return\ Return\ the\ result\ of\ gap\ buffer\ cursor_right.\n
comment16.params=char_count
comment16.target=boolean\ cursor_right(int)
comment16.text=\n\ \ Pass\ cursor_right\ command\ through\ to\ the\ current\ line.\n\ \ \n\ \ @return\ Return\ the\ result\ of\ gap\ buffer\ cursor_right.\n
comment17.params=
comment17.target=boolean\ cursor_up()
comment17.text=\n\ Move\ the\ cursor\ up\ one\ line.\ Adjusting\ the\ cursor\ appropriately\n\ as\ it\ is\ moved.\n\ \n\ @return\ Return\ true\ if\ next\ line\ up\ is\ moved\ to,\ and\ false\ if\ no\ movement.\n
comment18.params=line_count
comment18.target=boolean\ cursor_up(int)
comment18.text=\n\ \ Move\ to\ the\ next\ n\ lines\ up\ in\ the\ stored\ structure.\ \ This\ will\n\ \ be\ as\ if\ the\ cursor_up()\ method\ is\ called\ n\ times.\n\ \ \n\ \ @return\ Return\ true\ if\ new\ line\ moved\ to,\ and\ false\ if\ no\ movement.\n
comment19.params=
comment19.target=boolean\ cursor_down()
comment19.text=\n\ Move\ the\ cursor\ down\ one\ line.\ Adjusting\ the\ cursor\ appropriately\n\ as\ it\ is\ moved.\n\ \n\ @return\ Return\ true\ if\ next\ line\ down\ is\ moved\ to,\ and\ false\ if\ no\ movement.\n
comment2.params=
comment2.target=boolean\ grow_array()
comment2.text=\n\ Grow\ the\ buffer\ array.\n\ \n\ @return\ True\ if\ the\ buffer\ grew,\ otherwise\ false.\n
comment20.params=line_count
comment20.target=boolean\ cursor_down(int)
comment20.text=\n\ \ Move\ to\ the\ next\ n\ lines\ down\ in\ the\ stored\ structure.\ \ This\ will\n\ \ be\ as\ if\ the\ cursor_down()\ method\ is\ called\ n\ times.\n\ \ \n\ \ @return\ Return\ true\ if\ new\ line\ moved\ to,\ and\ false\ if\ no\ movement.\n
comment21.params=
comment21.target=boolean\ cursor_move_first_line()
comment21.text=\n\ \ Move\ to\ the\ first\ line\ in\ the\ stored\ structure,\ and\ set\ the\ new\ line\ cursor\ \n\ \ to\ the\ previous\ line.\ \ Doing\ this\ without\ interrupting\ the\ cursors\ inbetween.\n\ \ \n\ \ @return\ Return\ true\ if\ new\ line\ moved\ to,\ and\ false\ if\ no\ movement.\n
comment22.params=
comment22.target=boolean\ cursor_move_last_line()
comment22.text=\n\ \ Move\ to\ the\ last\ line\ in\ the\ stored\ structure,\ and\ set\ the\ new\ line\ cursor\ \n\ \ to\ the\ previous\ line.\ \ Doing\ this\ without\ interrupting\ the\ cursors\ inbetween.\n\ \ \n\ \ @return\ Return\ true\ if\ new\ line\ moved\ to,\ and\ false\ if\ no\ movement.\n
comment23.params=
comment23.target=boolean\ cursor_move_start_line()
comment23.text=\n\ \ Pass\ cursor_move_start_line\ command\ through\ to\ the\ current\ line.\n\ \ \n\ \ @return\ Return\ the\ result\ of\ gap\ buffer\ cursor_move_start_line.\n
comment24.params=
comment24.target=boolean\ cursor_move_end_line()
comment24.text=\n\ \ Pass\ cursor_move_end_line\ command\ through\ to\ the\ current\ line.\n\ \ \n\ \ @return\ Return\ the\ result\ of\ gap\ buffer\ cursor_move_end_line.\n
comment25.params=
comment25.target=boolean\ remove_line()
comment25.text=\n\ Will\ remove\ current\ line\ and\ characters\ in\ current\ line.\ \ Placing\n\ cursor\ at\ the\ start\ of\ the\ new\ line.\n\ \n\ Four\ situations\ need\ to\ be\ accounted\ for\:\n\ \ 1.\ Empty\ array.\n\ \ 2.\ One\ element\ array.\n\ \ 3.\ Many\ element\ array,\ with\ cursor\ at\ end.\n\ \ 4.\ Many\ element\ array,\ with\ cursor\ above\ end.\n\ \ 5.\ Many\ element\ array,\ with\ cursor\ above\ end\ but\n\ \ \ \ \ array\ is\ full\ and\ out\ of\ bounds\ error\ is\ possible.\n\ \n\ Assumption\:\ Cursor\ will\ point\ to\ the\ start\ of\ the\ line\ that\n\ was\ moved\ into\ the\ current\ position.\ \ Unless,\ the\ last\ line\n\ is\ removed\ then\ cursor\ will\ be\ set\ to\ end\ of\ the\ new\ last\ line.\n\ \n\ @return\ Return\ True\ if\ line\ was\ removed.\n
comment26.params=
comment26.target=boolean\ remove_char_toleft()
comment26.text=\n\ \ Pass\ remove_char_toleft\ command\ through\ to\ the\ current\ line.\n\ \ \n\ \ @return\ Return\ the\ result\ of\ gap\ buffer\ remove_char_toleft.\n
comment27.params=char_count
comment27.target=boolean\ remove_char_toleft(int)
comment27.text=\n\ \ Pass\ remove_char_toleft\ command\ through\ to\ the\ current\ line.\n\ \ \n\ \ @return\ Return\ the\ result\ of\ gap\ buffer\ remove_char_toleft.\n
comment28.params=str_value
comment28.target=boolean\ insert_text(java.lang.String)
comment28.text=\n\ \ Pass\ insert_text\ command\ through\ to\ the\ current\ line.\n\ \ \n\ \ @return\ Return\ the\ result\ of\ gap\ buffer\ insert_text.\n
comment29.params=char_value
comment29.target=boolean\ insert_text(char)
comment29.text=\n\ \ Pass\ insert_text\ command\ through\ to\ the\ current\ line.\n\ \ \n\ \ @return\ Return\ the\ result\ of\ gap\ buffer\ insert_text.\n
comment3.params=str_value
comment3.target=void\ load_line_at_start(java.lang.String)
comment3.text=\n\ Creates\ a\ new\ buffer\ and\ places\ it\ at\ the\ top\ of\ those\ buffers\ setting\ cursor\ to\ location\ zero\ of\ the\ new\ buffer.\n\n\ Assumption\:\ Cursor\ will\ set\ to\ the\ index\ of\ the\ new\ buffer.\n
comment30.params=
comment30.target=java.lang.String\ curr_cursor_string()
comment30.text=\n\ Get\ the\ current\ line\ and\ cursor\ position.\n\ \n\ %return\ Return\ the\ current\ line\ and\ cursor\ position\ in\ the\ form\ xx_yy,\ with\ xx\ being\ \n\ the\ current\ line\ and\ yy\ the\ cursor\ position.\n
comment31.params=
comment31.target=java.lang.String\ toString()
comment31.text=\n\ Return\ a\ string\ that\ contains\ all\ the\ stored\ strings,\ \n\ sepparated\ by\ a\ |\ character,\ indicating\ end\ of\ line.\n\n\ @return\ Returns\ the\ string\ to\ the\ raw\ buffered\ text.\n
comment32.params=index
comment32.target=java.lang.String\ toStringLine(int)
comment32.text=\n\ Returns\ the\ string\ at\ a\ given\ position.\n\ \n\ @return\ Returns\ null\ if\ a\ negative\ index\ is\ passed,\ or\n\ \ \ \ \ \ \ \ \ goes\ beyond\ the\ gap\ buffer\ array.\n
comment33.params=
comment33.target=java.lang.String\ toStringforPrint()
comment33.text=\n\ Return\ a\ string\ that\ contains\ all\ the\ stored\ strings,\ \n\ each\ line\ is\ numbered\ to\ indicate\ number\ of\ lines\n\n\ @return\ Returns\ the\ string\ to\ the\ raw\ buffered\ text.\n
comment4.params=str_value
comment4.target=void\ load_line_at_end(java.lang.String)
comment4.text=\n\ Load\ a\ gap\ buffer\ to\ the\ next\ open\ array\ location,\ then\ set\ the\ current\ line\n\ to\ this\ position.\n\ \n\ Assumption\:\ Cursor\ will\ set\ to\ the\ index\ of\ the\ new\ buffer.\n
comment5.params=str_value\ position
comment5.target=void\ load_line_at_position(java.lang.String,\ int)
comment5.text=\n\ Creates\ a\ new\ buffer\ and\ places\ at\ the\ identified\ position,\n\ shifting\ the\ buffers\ currently\ at\ that\ position\ and\ below\ down.\n\ \n\ Assumption\:\ If\ the\ number\ of\ lines\ is\ less\ than\ the\ position,\ the\n\ item\ will\ be\ placed\ as\ the\ last\ line.\ \ As\ if\ load_line_at_end\ was\n\ executed.\n\ \n\ Assumption\:\ Cursor\ will\ set\ to\ the\ index\ of\ the\ new\ buffer.\n
comment6.params=
comment6.target=boolean\ insert_empty_line_above()
comment6.text=\n\ Inserts\ a\ new\ empty\ gap\ buffer\ above\ the\ current\ line.\ \n\ \n\ Assumption\:\ Cursor\ will\ set\ to\ the\ index\ of\ the\ new\ buffer.\n\ \n\ @return\ Return\ true\ if\ line\ was\ inserted,\ otherwise\ false.\n
comment7.params=
comment7.target=boolean\ insert_empty_line_below()
comment7.text=\n\ Inserts\ a\ new\ empty\ gap\ buffer\ below\ the\ current\ line.\ \n\ \n\ Assumption\:\ Cursor\ will\ remain\ positioned\ at\ current\ line\ before\ insert.\n\ \n\ @return\ Return\ true\ if\ line\ was\ inserted,\ otherwise\ false.\n
comment8.params=
comment8.target=int\ line_count()
comment8.text=\n\ The\ count\ of\ gap\ buffers\ in\ the\ array.\n\ \n\ @return\ Returns\ the\ current\ number\ of\ lines.\n
comment9.params=
comment9.target=int\ curr_line_length()
comment9.text=\n\ \ Obtain\ the\ string\ length\ of\ the\ current\ line.\n\ \ \n\ \ @return\ Return\ the\ stored\ length\ in\ the\ currently\ referenced\ buffer.\n
numComments=34
